/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package lt.liutikas.reddit.openapi.api;

import lt.liutikas.reddit.openapi.model.CreateNewsRequest;
import lt.liutikas.reddit.openapi.model.News;
import lt.liutikas.reddit.openapi.model.NewsPage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-22T18:39:11.618267800+03:00[Europe/Vilnius]")
@Validated
@Tag(name = "news", description = "the news API")
public interface NewsApi {

    default NewsApiDelegate getDelegate() {
        return new NewsApiDelegate() {};
    }

    /**
     * POST /news : Create news
     *
     * @param createNewsRequest  (optional)
     * @return News created (status code 201)
     */
    @Operation(
        operationId = "createNews",
        summary = "Create news",
        tags = { "news" },
        responses = {
            @ApiResponse(responseCode = "201", description = "News created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = News.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/news",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<News> createNews(
        @Parameter(name = "CreateNewsRequest", description = "") @Valid @RequestBody(required = false) CreateNewsRequest createNewsRequest
    ) {
        return getDelegate().createNews(createNewsRequest);
    }


    /**
     * GET /news : List all news
     *
     * @param subChannels Sub channels (required)
     * @param pageToken Page token (optional, default to 0)
     * @param pageSize Page size (optional, default to 20)
     * @return A list of news (status code 200)
     */
    @Operation(
        operationId = "listNews",
        summary = "List all news",
        tags = { "news" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of news", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NewsPage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/news",
        produces = { "application/json" }
    )
    default ResponseEntity<NewsPage> listNews(
        @NotNull @Parameter(name = "subChannels", description = "Sub channels", required = true) @Valid @RequestParam(value = "subChannels", required = true, defaultValue = "ukraine,lithuania") List<String> subChannels,
        @Parameter(name = "pageToken", description = "Page token") @Valid @RequestParam(value = "pageToken", required = false, defaultValue = "0") Integer pageToken,
        @Parameter(name = "pageSize", description = "Page size") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "20") Integer pageSize
    ) {
        return getDelegate().listNews(subChannels, pageToken, pageSize);
    }

}
